name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      EC2_HOST: 3.148.103.18
      EC2_USER: ec2-user
      AWS_REGION: us-east-2
      ECR_REPOSITORY: testrepo
      ECR_REGISTRY: 289440861148.dkr.ecr.us-east-2.amazonaws.com
      APP_PORT: 3000
      MAX_RETRIES: 3
      RETRY_DELAY: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Set up SSH agent
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Deploy to EC2 instance
      run: |
        ssh -T -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST \
          ECR_REGISTRY="$ECR_REGISTRY" \
          ECR_REPOSITORY="$ECR_REPOSITORY" \
          APP_PORT="$APP_PORT" \
          /bin/bash << 'EODEPLOY'
        set -ex
        
        # Ensure Docker is running
        sudo systemctl start docker || sudo systemctl restart docker
        
        # Pull the image with retries
        for i in {1..$MAX_RETRIES}; do
          if docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest; then
            break
          fi
          if [ $i -eq $MAX_RETRIES ]; then
            echo "❌ Failed to pull image after $MAX_RETRIES attempts"
            exit 1
          fi
          echo "⚠️ Pull failed, retrying in $RETRY_DELAY seconds..."
          sleep $RETRY_DELAY
        done
        
        # Clean up old container
        docker rm -f app || true
        
        # Run new container with health check
        docker run -d \
          --name app \
          -p ${APP_PORT}:3000 \
          --restart unless-stopped \
          --health-cmd "curl -f http://localhost:${APP_PORT}/ || exit 1" \
          --health-interval 10s \
          --health-timeout 5s \
          --health-retries 3 \
          ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
        
        # Verify container started
        sleep 10
        docker ps -a
        docker inspect --format='{{json .State.Health}}' app || true
        EODEPLOY

    - name: Verify deployment
      run: |
        ssh -T -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST \
          APP_PORT="$APP_PORT" \
          /bin/bash << 'EOVERIFY'
        set -e
        
        echo "=== Container Status ==="
        docker ps -a
        
        CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' app)
        HEALTH_STATUS=$(docker inspect -f '{{.State.Health.Status}}' app 2>/dev/null || echo "no-health-check")
        
        if [ "$CONTAINER_STATUS" != "running" ]; then
          echo "❌ Container is not running (Status: $CONTAINER_STATUS)"
          docker logs app --tail 50
          exit 1
        fi
        
        if [ "$HEALTH_STATUS" == "unhealthy" ]; then
          echo "❌ Container health check failed"
          docker inspect --format='{{json .State.Health}}' app
          docker logs app --tail 50
          exit 1
        fi
        
        echo "✅ Container is running and healthy"
        EOVERIFY

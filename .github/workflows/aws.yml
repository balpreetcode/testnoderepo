name: Deploy via SSH

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      EC2_HOST: 3.148.103.18
      EC2_USER: ec2-user
      AWS_REGION: us-east-2
      ECR_REPOSITORY: testrepo
      APP_PORT: 3000

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Set up SSH agent
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Run deployment on EC2
      run: |
        ssh -T -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST /bin/bash << 'EOREMOTE'
          set -x  # Enable debug output
          
          # Create AWS credentials directory
          mkdir -p ~/.aws
          
          # Write AWS credentials
          cat > ~/.aws/credentials << 'EOAWS'
          [default]
          aws_access_key_id = $AWS_ACCESS_KEY_ID
          aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
          EOAWS
          
          # Write AWS config
          cat > ~/.aws/config << 'EOCONFIG'
          [default]
          region = $AWS_REGION
          EOCONFIG
          
          # Log into ECR
          echo "Logging into ECR..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
          
          # Pull the image
          echo "Pulling Docker image..."
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Stop and remove old container if it exists
          echo "Stopping and removing old container..."
          docker stop app || true
          docker rm app || true
          
          # Run the new container with debug options
          echo "Starting new container..."
          docker run -d \
            --name app \
            -p $APP_PORT:3000 \
            --restart unless-stopped \
            $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Immediate verification
          echo "Checking container status..."
          sleep 5  # Give container time to start
          docker ps -a
          docker inspect app
          docker logs app
        EOREMOTE

    - name: Verify deployment
      run: |
        ssh -T -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST /bin/bash << 'EOVERIFY'
          set -e  # Exit on error
          
          echo "=== Full container status ==="
          docker ps -a
          
          echo -e "\n=== Checking app container ==="
          CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' app 2>/dev/null || echo "missing")
          
          if [ "$CONTAINER_STATUS" == "running" ]; then
            echo "✅ Container is running"
            echo -e "\n=== Container logs ==="
            docker logs app --tail 50
          elif [ "$CONTAINER_STATUS" == "exited" ]; then
            echo "❌ Container exited"
            echo -e "\n=== Exit code ==="
            docker inspect -f '{{.State.ExitCode}}' app
            echo -e "\n=== Container logs ==="
            docker logs app
            exit 1
          else
            echo "❌ Container not found or in $CONTAINER_STATUS state"
            echo -e "\n=== All containers ==="
            docker ps -a
            exit 1
          fi
          
          echo -e "\n=== Testing application health ==="
          if curl -sSf --retry 3 --retry-delay 2 http://localhost:$APP_PORT/; then
            echo "✅ Application is responding"
          else
            echo "❌ Application not responding"
            docker logs app
            exit 1
          fi
        EOVERIFY

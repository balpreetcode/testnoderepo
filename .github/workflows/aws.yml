name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      EC2_HOST: 3.148.103.18
      EC2_USER: ec2-user
      AWS_REGION: us-east-2
      ECR_REPOSITORY: testrepo
      APP_PORT: 3000

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Set up SSH agent
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Deploy to EC2 instance
      run: |
        ssh -T -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST /bin/bash << 'EODEPLOY'
        set -ex  # Enable debugging and exit on error
        
        # Verify Docker is running
        sudo systemctl status docker || sudo systemctl start docker
        
        # Configure AWS credentials
        mkdir -p ~/.aws
        cat > ~/.aws/credentials << EOF
        [default]
        aws_access_key_id = $AWS_ACCESS_KEY_ID
        aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
        EOF
        
        cat > ~/.aws/config << EOF
        [default]
        region = $AWS_REGION
        EOF
        
        # Login to ECR
        aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $ECR_REGISTRY
        
        # Pull the latest image
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Stop and remove old container if exists
        docker stop app || true
        docker rm app || true
        
        # Run new container with proper restart policy
        docker run -d \
          --name app \
          -p $APP_PORT:3000 \
          --restart unless-stopped \
          $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Verify container started
        sleep 5
        docker ps -a
        EODEPLOY

    - name: Verify deployment
      run: |
        # Wait for application to start
        sleep 15
        
        ssh -T -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST /bin/bash << 'EOVERIFY'
        set -e  # Exit on error
        
        echo "=== Docker Container Status ==="
        docker ps -a
        
        echo "=== Checking Container Health ==="
        CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' app)
        
        if [ "$CONTAINER_STATUS" != "running" ]; then
          echo "❌ Container is not running. Status: $CONTAINER_STATUS"
          echo "Exit Code: $(docker inspect -f '{{.State.ExitCode}}' app)"
          echo "=== Container Logs ==="
          docker logs app || true
          exit 1
        fi
        
        echo "=== Testing Application Endpoint ==="
        if curl -sSf --retry 3 --retry-delay 5 http://localhost:$APP_PORT/ >/dev/null; then
          echo "✅ Application is responding"
        else
          echo "❌ Application not responding"
          echo "=== Last 50 Log Lines ==="
          docker logs app --tail 50
          exit 1
        fi
        EOVERIFY

    - name: Verify external access
      run: |
        if curl -sSf --retry 3 --retry-delay 5 http://$EC2_HOST:$APP_PORT/ >/dev/null; then
          echo "✅ Application is accessible externally"
        else
          echo "❌ Application not accessible externally"
          echo "Check EC2 security group rules for port $APP_PORT"
          exit 1
        fi

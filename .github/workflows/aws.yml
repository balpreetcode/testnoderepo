name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      EC2_HOST: 3.148.103.18
      EC2_USER: ec2-user
      AWS_REGION: us-east-2
      ECR_REPOSITORY: testrepo
      ECR_REGISTRY: 289440861148.dkr.ecr.us-east-2.amazonaws.com
      APP_PORT: 3000
      MAX_RETRIES: 5
      RETRY_DELAY: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Set up SSH agent
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Deploy to EC2 instance
      run: |
        ssh -T -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST \
          ECR_REGISTRY="$ECR_REGISTRY" \
          ECR_REPOSITORY="$ECR_REPOSITORY" \
          APP_PORT="$APP_PORT" \
          /bin/bash << 'EODEPLOY'
        set -ex
        
        # Ensure Docker is running
        if ! sudo systemctl is-active --quiet docker; then
          echo "Starting Docker service..."
          sudo systemctl start docker || sudo systemctl restart docker
        fi
        
        # Verify Docker is operational
        docker info || {
          echo "Docker not functioning properly"
          sudo systemctl status docker
          exit 1
        }
        
        # Pull the image using instance profile credentials
        echo "=== Pulling Docker Image ==="
        docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest || {
          echo "Failed to pull image"
          exit 1
        }
        
        # Stop and remove old container if exists
        echo "=== Cleaning Up Old Containers ==="
        docker stop app || true
        docker rm app || true
        
        # Run new container
        echo "=== Starting New Container ==="
        docker run -d \
          --name app \
          -p ${APP_PORT}:3000 \
          --restart unless-stopped \
          ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
        
        # Verify container started
        echo "=== Container Status ==="
        sleep 5
        docker ps -a
        EODEPLOY

    - name: Verify deployment
      run: |
        ssh -T -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST \
          APP_PORT="$APP_PORT" \
          /bin/bash << 'EOVERIFY'
        set -e
        
        echo "=== Docker Container Status ==="
        docker ps -a
        
        echo "=== Checking Container Health ==="
        CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' app || echo "missing")
        
        if [ "$CONTAINER_STATUS" != "running" ]; then
          echo "❌ Container is not running. Status: $CONTAINER_STATUS"
          echo "Exit Code: $(docker inspect -f '{{.State.ExitCode}}' app 2>/dev/null || echo "N/A")"
          echo "=== Container Logs ==="
          docker logs app --tail 50 || true
          exit 1
        fi
        
        echo "=== Testing Application Endpoint ==="
        if curl -sSf --retry 3 --retry-delay 2 http://localhost:${APP_PORT}/ >/dev/null; then
          echo "✅ Application is responding"
        else
          echo "❌ Application not responding"
          echo "=== Last 50 Log Lines ==="
          docker logs app --tail 50
          exit 1
        fi
        EOVERIFY

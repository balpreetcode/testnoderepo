name: Deploy via SSH

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      EC2_HOST: 3.148.103.18
      EC2_USER: ec2-user
      AWS_REGION: us-east-2
      ECR_REPOSITORY: testrepo
      APP_PORT: 3000

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Set up SSH agent
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Run deployment on EC2 with detailed debugging
  run: |
    ssh -T -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST /bin/bash << 'EODEPLOY'
    set -ex  # Enable debugging and exit on error
    
    # Verify AWS credentials exist
    echo "=== AWS Credentials ==="
    cat ~/.aws/credentials || echo "No credentials file"
    aws sts get-caller-identity || echo "AWS CLI not working"
    
    # Verify ECR login
    echo "=== ECR Auth ==="
    cat ~/.docker/config.json || echo "No docker config"
    
    # Pull image with verbose output
    echo "=== Pulling Image ==="
    docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    # Clean up any existing container
    echo "=== Cleaning Up ==="
    docker stop app || true
    docker rm app || true
    
    # Run container with debug options
    echo "=== Starting Container ==="
    docker run -d \
      --name app \
      -p $APP_PORT:3000 \
      --restart unless-stopped \
      $ECR_REGISTRY/$ECR_REPOSITORY:latest
    
    # Immediate status check
    echo "=== Container Status ==="
    sleep 5  # Give container time to start
    docker ps -a
    docker inspect app || echo "Container inspection failed"
    docker logs app || echo "Could not get container logs"
    EODEPLOY

    - name: Verify deployment with retries
    run: |
      for i in {1..5}; do
        ssh -T -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST /bin/bash << 'EOVERIFY' && break
          set -e
          echo "=== Attempt $i/5 ==="
          
          # Check container exists
          if ! docker inspect app >/dev/null 2>&1; then
            echo "❌ Container 'app' does not exist"
            exit 1
          fi
          
          # Get detailed status
          CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' app)
          echo "Container status: $CONTAINER_STATUS"
          
          if [ "$CONTAINER_STATUS" != "running" ]; then
            echo "❌ Container not running"
            echo "Exit code: $(docker inspect -f '{{.State.ExitCode}}' app)"
            echo "=== Logs ==="
            docker logs app || true
            exit 1
          fi
          
          # Test application
          if curl -sSf --connect-timeout 5 http://localhost:$APP_PORT/; then
            echo "✅ Application is healthy"
            exit 0
          else
            echo "❌ Application not responding"
            docker logs app --tail 50 || true
            exit 1
          fi
        EOVERIFY
        
        if [ $i -lt 5 ]; then
          echo "Retrying in 10 seconds..."
          sleep 10
        else
          echo "All verification attempts failed"
          exit 1
        fi
      done

    - name: Verify deployment
      run: |
        ssh -T -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST /bin/bash << 'EOVERIFY'
          set -e  # Exit on error
          
          echo "=== Full container status ==="
          docker ps -a
          
          echo -e "\n=== Checking app container ==="
          CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' app 2>/dev/null || echo "missing")
          
          if [ "$CONTAINER_STATUS" == "running" ]; then
            echo "✅ Container is running"
            echo -e "\n=== Container logs ==="
            docker logs app --tail 50
          elif [ "$CONTAINER_STATUS" == "exited" ]; then
            echo "❌ Container exited"
            echo -e "\n=== Exit code ==="
            docker inspect -f '{{.State.ExitCode}}' app
            echo -e "\n=== Container logs ==="
            docker logs app
            exit 1
          else
            echo "❌ Container not found or in $CONTAINER_STATUS state"
            echo -e "\n=== All containers ==="
            docker ps -a
            exit 1
          fi
          
          echo -e "\n=== Testing application health ==="
          if curl -sSf --retry 3 --retry-delay 2 http://localhost:$APP_PORT/; then
            echo "✅ Application is responding"
          else
            echo "❌ Application not responding"
            docker logs app
            exit 1
          fi
        EOVERIFY

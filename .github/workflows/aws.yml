name: Deploy via SSM

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      EC2_HOST: 3.148.103.18
      EC2_USER: ec2-user
      AWS_REGION: us-east-2
      ECR_REPOSITORY: testrepo

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Set up SSH agent
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Run deployment on EC2
      run: |
        # Properly escape variables and commands for the remote shell
        ssh -T -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST /bin/bash << 'EOREMOTE'
          # Create AWS credentials directory
          mkdir -p ~/.aws
          
          # Write AWS credentials
          cat > ~/.aws/credentials << 'EOAWS'
          [default]
          aws_access_key_id = $AWS_ACCESS_KEY_ID
          aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
          EOAWS
          
          # Write AWS config
          cat > ~/.aws/config << 'EOCONFIG'
          [default]
          region = $AWS_REGION
          EOCONFIG
          
          # Log into ECR (non-interactively)
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
          
          # Pull the image
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Stop and remove old container if it exists
          docker stop app || true
          docker rm app || true
          
          # Run the new container
          docker run -d --name app -p 3000:3000 $ECR_REGISTRY/$ECR_REPOSITORY:latest
        EOREMOTE
